[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "attention-based-neural-networks"
version = "0.1.0"
description = "Image Captioning with Attention-Based Neural Networks"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/attention-based-neural-networks"
repository = "https://github.com/yourusername/attention-based-neural-networks.git"
documentation = "https://attention-based-neural-networks.readthedocs.io"
keywords = ["deep-learning", "attention", "neural-networks", "image-captioning", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.8"
ipykernel = "^6.0.0"
# Core ML/DL frameworks
torch = ">=2.0.0,<2.8.0"
torchtext = "0.15.2"
torchvision = ">=0.15.0,<0.18.0"
# Data manipulation and analysis
numpy = "^1.21.0"
pandas = "^1.3.0"
matplotlib = "^3.5.0"
# Image processing
pillow = "^8.3.0"
# NLP processing
spacy = "^3.4.0"
# Jupyter support
jupyter = "^1.0.0"
jupyterlab = "^3.4.0"
ipywidgets = "^7.7.0"
nbconvert = "^6.4.0"

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.docs.dependencies]

[tool.poetry.scripts]
attention-networks = "attention_networks.cli:main"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["attention_networks"]
known_third_party = ["torch", "torchvision", "torchtext", "numpy", "pandas", "matplotlib", "PIL", "spacy", "sklearn", "tqdm", "jupyter"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchtext.*",
    "spacy.*",
    "sklearn.*",
    "matplotlib.*",
    "PIL.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["attention_networks"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
