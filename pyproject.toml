[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "attention-based-neural-networks"
version = "0.1.0"
description = "Image Captioning with Attention-Based Neural Networks"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["deep-learning", "attention", "neural-networks", "image-captioning", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core ML/DL frameworks - using compatible versions
    "torch>=2.0.0,<2.8.0",
    "torchvision>=0.15.0,<0.18.0",
    "torchtext>=0.15.0,<0.18.0",
    # Data manipulation and analysis
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "pillow>=8.3.0",
    # NLP and text processing
    "spacy>=3.4.0",
    # Machine learning utilities
    "scikit-learn>=1.1.0",
    "tqdm>=4.64.0",
    # Jupyter and notebook support
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipywidgets>=7.7.0",
    "nbconvert>=6.4.0",
    # Additional utilities
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    "opencv-python>=4.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.971",
    "pre-commit>=2.20.0",
    "jupyter-contrib-nbextensions>=0.7.0",
    "jupyter-nbextensions-configurator>=0.6.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/attention-based-neural-networks"
Repository = "https://github.com/yourusername/attention-based-neural-networks.git"
Issues = "https://github.com/yourusername/attention-based-neural-networks/issues"
Documentation = "https://attention-based-neural-networks.readthedocs.io"

[project.scripts]
attention-networks = "attention_networks.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["attention_networks*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["attention_networks"]
known_third_party = ["torch", "torchvision", "torchtext", "numpy", "pandas", "matplotlib", "PIL", "spacy", "sklearn", "tqdm", "jupyter"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchtext.*",
    "spacy.*",
    "sklearn.*",
    "matplotlib.*",
    "PIL.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["attention_networks"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]